String[] letters = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

final int WIDTH = 1000;

int BOARD_WIDTH = 5;
int BOARD_HEIGHT = 5;
float TILE_SIZE = 200;

final int GAME_MODE = 0;

final int SOLVES_IN_AVERAGE = 5;
int[][] board;
float[] shades;
float[][] transitions;
PFont font;
int highlightX = 2;
int highlightY = 2;
boolean horizontalLast = false;
int UI_SIZE = 300;
int startMillis = -1;
int endMillis = -1;
int correctTiles = 0;
int[] times = new int[SOLVES_IN_AVERAGE];
int average = -1;
int minIndex = -1;
int maxIndex = -1;
boolean isScrambled = false;
int centerTileX = BOARD_WIDTH/2;
int centerTileY = BOARD_HEIGHT/2;

int timeSinceLastWASD = -9999;

int moveCount = 0;
int resizeDelay = 0;

float TRANSITION_FACTOR = 0.666667;
boolean lastMoused = true;
boolean isSpaceDown = false;
boolean isShiftDown = false;
boolean isMouseDown = false;

void setup(){
  frameRate(60);
  font = loadFont("ArialMT-48.vlw");
  
  resetBoard(5);
  //size(BOARD_WIDTH*TILE_SIZE+UI_SIZE,BOARD_HEIGHT*TILE_SIZE);
  size(1300,1000);
  noSmooth();
  noStroke();
}
void resetBoard(int inputSize){
  horizontalLast = false;
  isScrambled = false;
  
  BOARD_HEIGHT = inputSize;
  BOARD_WIDTH = inputSize;
  
  highlightX = centerTileX = (int)(BOARD_WIDTH/2);
  highlightY = centerTileY = (int)(BOARD_HEIGHT/2);

  TILE_SIZE = ((float)1000.0)/inputSize;
  
  board = new int[BOARD_HEIGHT][BOARD_WIDTH];
  shades = new float[BOARD_HEIGHT*BOARD_WIDTH];
  transitions = new float[2][max(BOARD_WIDTH,BOARD_HEIGHT)];
  
  for(int y = 0; y < BOARD_HEIGHT; y++){
    for(int x = 0; x < BOARD_WIDTH; x++){
      board[y][x] = y*BOARD_WIDTH+x;
      shades[y*BOARD_WIDTH+x] = random(0.5,1.0);
    }
  }
  for(int i = 0; i < 2; i++){
    for(int j = 0; j < max(BOARD_HEIGHT,BOARD_WIDTH); j++){
      transitions[i][j] = 0;
    }
  }
  for(int i = 0; i < SOLVES_IN_AVERAGE; i++){
    times[i] = -1;
  }
  
  startMillis = -1;
  endMillis = -1;
  
  correctTiles = BOARD_WIDTH*BOARD_HEIGHT;
  
  moveCount = 0;
}
void draw(){
  if(isMouseDown && endMillis == -1){
    lastMoused = true;
    int newX = floor((float)mouseX/TILE_SIZE+BOARD_WIDTH)%BOARD_WIDTH;
    int newY = floor((float)mouseY/TILE_SIZE+BOARD_HEIGHT)%BOARD_HEIGHT;
    while(hasDiff(newX,highlightX,true) && endMillis == -1 && isMoveableTile(true)){
      move(0,highlightX,highlightY, false);
    }
    while(hasDiff(newX,highlightX,false) && endMillis == -1 && isMoveableTile(true)){
      move(1,highlightX,highlightY, false);
    }
    while(hasDiff(newY,highlightY,true) && endMillis == -1 && isMoveableTile(false)){
      move(2,highlightX,highlightY, false);
    }
    while(hasDiff(newY,highlightY,false) && endMillis == -1 && isMoveableTile(false)){
      move(3,highlightX,highlightY, false);
    }
  }
for(int i = 0; i < 2; i++){
    for(int j = 0; j < max(BOARD_HEIGHT,BOARD_WIDTH); j++){
      if(i == 0){
        if(transitions[i][j] > ((float)BOARD_WIDTH)/2){
          transitions[i][j] -= BOARD_WIDTH;
        }else if(transitions[i][j] < -((float)BOARD_WIDTH)/2){
          transitions[i][j] += BOARD_WIDTH;
        }
      }else if(i == 1){
        if(transitions[i][j] > ((float)BOARD_HEIGHT)/2){
          transitions[i][j] -= BOARD_HEIGHT;
        }else if(transitions[i][j] < -((float)BOARD_HEIGHT)/2){
          transitions[i][j] += BOARD_HEIGHT;
        }
      }
      transitions[i][j] *= TRANSITION_FACTOR;
    }
  }
  background(160,200,250);
  setFont(0);
  for(int y = 0; y < BOARD_HEIGHT; y++){
    for(int x = 0; x < BOARD_WIDTH; x++){
      float ax = x;
      if(horizontalLast){
        ax += transitions[0][y];
      }
      ax = (ax+BOARD_WIDTH)%BOARD_WIDTH;
      float ay = y;
      if(!horizontalLast){
        ay += transitions[1][x];
      }
      ay = (ay+BOARD_HEIGHT)%BOARD_HEIGHT;
      int i = board[y][x];
      while(ay > -1){
        float aax = ax;
        while(aax > -1){
          //fill(255*shades[i],190*shades[i],150*shades[i]);
          if(GAME_MODE == 1 && x == centerTileX && y == centerTileY){
            fill(255,255,255);
          }else{
            float colorX = (float)(i%BOARD_WIDTH)/(BOARD_WIDTH-1);
            float colorY = (float)(i/BOARD_WIDTH)/(BOARD_HEIGHT-1);
            
            /*float xDist = abs((i%BOARD_WIDTH)-x);
            if(xDist >= 3) xDist = 5-xDist;
            
            float yDist = abs((i/BOARD_WIDTH)-y);
            if(yDist >= 3) yDist = 5-yDist;
            float relDist = ((float)(xDist+yDist))/5.0;
            colorX = 1-relDist;
            fill(colorX*155+100);*/
            fill((1-colorX)*255,colorY*255,colorX*255);
          }
          rect(aax*TILE_SIZE,ay*TILE_SIZE,TILE_SIZE,TILE_SIZE);
          fill(0,0,0);
          if(BOARD_WIDTH*BOARD_HEIGHT > 26){
            int py = floor(i/BOARD_WIDTH);
            int px = i%BOARD_WIDTH;
            text((i+1),(aax+0.5)*TILE_SIZE,(ay+0.7)*TILE_SIZE);
          }else{
            text(letters[i],(aax+0.5)*TILE_SIZE,(ay+0.82)*TILE_SIZE);
          }
